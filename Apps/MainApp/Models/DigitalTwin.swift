import Foundation
import Combine
import HealthKit // For HealthKit data types if needed

/// Represents the Digital Twin, a dynamic, predictive model of a user's health.
///
/// - Central repository for all data related to the twin, including biometric, genomic, clinical, lifestyle, and environmental data.
/// - Used for analytics, predictions, and personalized recommendations.
public struct DigitalTwin: Codable, Identifiable {
    public let id: UUID
    /// The date this version of the twin was created or last updated.
    public var lastUpdated: Date

    // MARK: - Core Data Components
    /// High-resolution biometric data.
    public var biometricData: BiometricProfile
    /// Genomic data profile (optional and user-provided).
    public var genomicData: GenomicProfile?
    /// Clinical data from EHRs and lab results.
    public var clinicalData: ClinicalProfile?
    /// Lifestyle data including nutrition, exercise, and sleep.
    public var lifestyleData: LifestyleProfile
    /// Environmental data context.
    public var environmentalContext: EnvironmentalProfile
    /// Health predictions generated by the Pre-Symptomatic Analytics Core.
    public var healthPredictions: [HealthPrediction]

    // MARK: - Computed Properties for Risk Scores and Health Summaries
    public var overallHealthScore: Double {
        // A composite score based on various health metrics
        // This would involve a more complex calculation in a real scenario
        let biometricScore = (biometricData.restingHeartRate.last ?? 70.0) < 70 ? 0.3 : 0.1
        let lifestyleScore = (lifestyleData.averageSleepDuration > 7 * 3600 && lifestyleData.weeklyExerciseMinutes > 150) ? 0.4 : 0.2
        let predictionScore = healthPredictions.first?.riskLevel == .low ? 0.3 : 0.1
        return min(1.0, biometricScore + lifestyleScore + predictionScore) * 100
    }

    public var riskSummary: String {
        if healthPredictions.isEmpty {
            return "No immediate health risks detected."
        }
        let highRiskPredictions = healthPredictions.filter { $0.riskLevel == .high }
        if !highRiskPredictions.isEmpty {
            return "High risk detected for: \(highRiskPredictions.map { $0.type.rawValue }.joined(separator: ", ")). Consult a doctor."
        }
        return "Low to moderate health risks. Continue monitoring."
    }

    // MARK: - Initializer
    public init(id: UUID = UUID(),
                lastUpdated: Date = Date(),
                biometricData: BiometricProfile,
                genomicData: GenomicProfile? = nil,
                clinicalData: ClinicalProfile? = nil,
                lifestyleData: LifestyleProfile,
                environmentalContext: EnvironmentalProfile,
                healthPredictions: [HealthPrediction] = []) {
        self.id = id
        self.lastUpdated = lastUpdated
        self.biometricData = biometricData
        self.genomicData = genomicData
        self.clinicalData = clinicalData
        self.lifestyleData = lifestyleData
        self.environmentalContext = environmentalContext
        self.healthPredictions = healthPredictions
    }

    // MARK: - Methods for Updating and Merging Twin Data

    /// Updates the digital twin with new health data entries.
    public mutating func update(with healthDataEntries: [HealthDataEntry]) {
        for entry in healthDataEntries {
            switch entry.dataType {
            case .heartRate:
                biometricData.heartRate.append(entry.value)
            case .heartRateVariability:
                biometricData.heartRateVariability.append(entry.value)
            case .oxygenSaturation:
                biometricData.bloodOxygenSaturation.append(entry.value)
            case .sleepDuration:
                lifestyleData.sleepDurations.append(entry.value)
            case .steps:
                lifestyleData.dailySteps.append(Int(entry.value))
            case .caloriesBurned:
                lifestyleData.caloriesBurned.append(entry.value)
            case .environmentalAirQuality:
                environmentalContext.airQualityReadings.append(Int(entry.value))
            case .environmentalPollen:
                environmentalContext.pollenCounts.append(Int(entry.value))
            // Add more cases for other data types
            default:
                break // Handle other data types or log a warning
            }
        }
        self.lastUpdated = Date()
    }

    /// Merges another digital twin's data into this twin.
    public mutating func merge(with otherTwin: DigitalTwin) {
        self.biometricData.merge(with: otherTwin.biometricData)
        self.lifestyleData.merge(with: otherTwin.lifestyleData)
        self.environmentalContext.merge(with: otherTwin.environmentalContext)
        self.healthPredictions.append(contentsOf: otherTwin.healthPredictions)
        self.lastUpdated = Date()
        // More sophisticated merging logic would be needed for genomic and clinical data
    }

    /// Generates new health predictions based on the current state of the twin.
    public mutating func generatePredictions() {
        // This is a placeholder for actual predictive modeling.
        // In a real system, this would involve calling a CoreML model or a backend AI service.
        let newPrediction = HealthPrediction(
            type: .cardiovascularDisease,
            riskLevel: Double.random(in: 0...1) > 0.8 ? .high : .low,
            confidence: 0.9,
            timestamp: Date(),
            details: "Based on current biometric and lifestyle trends."
        )
        self.healthPredictions.append(newPrediction)
    }

    /// Calculates and updates the overall health score and risk assessments.
    public mutating func updateHealthScores() {
        // The computed properties `overallHealthScore` and `riskSummary`
        // already provide a dynamic calculation. If persistent storage is needed
        // for these, they would be stored here.
        // For now, this method can trigger re-evaluation or logging.
        print("Digital Twin Health Score: \(overallHealthScore)")
        print("Digital Twin Risk Summary: \(riskSummary)")
    }

    /// Creates a snapshot of the current digital twin state for versioning.
    public func createSnapshot() -> DigitalTwin {
        return self // A simple copy for now, more complex versioning would involve deep copying or serialization
    }

    /// Queries the digital twin for specific health insights.
    public func queryHealthInsight(for type: HealthInsightType) -> String {
        switch type {
        case .sleepQuality:
            return "Your average sleep duration is \(String(format: "%.1f", lifestyleData.averageSleepDuration / 3600)) hours with \(String(format: "%.1f", lifestyleData.deepSleepPercentage))% deep sleep."
        case .cardiovascularHealth:
            return "Your average resting heart rate is \(String(format: "%.0f", biometricData.restingHeartRate.last ?? 0)) bpm. HRV trends are \(biometricData.heartRateVariability.last ?? 0 > 40 ? "good" : "fair")."
        case .stressManagement:
            return "Your recent stress levels indicate a need for mindfulness. Consider a 10-minute meditation."
        case .activityLevel:
            return "You've averaged \(lifestyleData.dailySteps.last ?? 0) steps per day this week."
        case .overallWellness:
            return "Your overall health score is \(String(format: "%.0f", overallHealthScore)). \(riskSummary)"
        }
    }
}

// MARK: - Sub-structures for Data Organization

/// A profile of the user's biometric data (e.g., HRV, RHR, SpO2).
public struct BiometricProfile: Codable {
    public var heartRate: [Double] // Added
    public var heartRateVariability: [Double]
    public var restingHeartRate: [Double]
    public var bloodOxygenSaturation: [Double]
    public var respiratoryRate: [Double] // Added
    public var bodyTemperature: [Double] // Added
    public var bloodPressureSystolic: [Double] // Added
    public var bloodPressureDiastolic: [Double] // Added
    public var bloodGlucose: [Double] // Added
    public var weight: [Double] // Added
    public var height: [Double] // Added
    public var bodyMassIndex: [Double] // Added
    public var bodyFatPercentage: [Double] // Added

    public init(heartRate: [Double] = [], heartRateVariability: [Double] = [], restingHeartRate: [Double] = [], bloodOxygenSaturation: [Double] = [], respiratoryRate: [Double] = [], bodyTemperature: [Double] = [], bloodPressureSystolic: [Double] = [], bloodPressureDiastolic: [Double] = [], bloodGlucose: [Double] = [], weight: [Double] = [], height: [Double] = [], bodyMassIndex: [Double] = [], bodyFatPercentage: [Double] = []) {
        self.heartRate = heartRate
        self.heartRateVariability = heartRateVariability
        self.restingHeartRate = restingHeartRate
        self.bloodOxygenSaturation = bloodOxygenSaturation
        self.respiratoryRate = respiratoryRate
        self.bodyTemperature = bodyTemperature
        self.bloodPressureSystolic = bloodPressureSystolic
        self.bloodPressureDiastolic = bloodPressureDiastolic
        self.bloodGlucose = bloodGlucose
        self.weight = weight
        self.height = height
        self.bodyMassIndex = bodyMassIndex
        self.bodyFatPercentage = bodyFatPercentage
    }

    public mutating func merge(with other: BiometricProfile) {
        self.heartRate.append(contentsOf: other.heartRate)
        self.heartRateVariability.append(contentsOf: other.heartRateVariability)
        self.restingHeartRate.append(contentsOf: other.restingHeartRate)
        self.bloodOxygenSaturation.append(contentsOf: other.bloodOxygenSaturation)
        self.respiratoryRate.append(contentsOf: other.respiratoryRate)
        self.bodyTemperature.append(contentsOf: other.bodyTemperature)
        self.bloodPressureSystolic.append(contentsOf: other.bloodPressureSystolic)
        self.bloodPressureDiastolic.append(contentsOf: other.bloodPressureDiastolic)
        self.bloodGlucose.append(contentsOf: other.bloodGlucose)
        self.weight.append(contentsOf: other.weight)
        self.height.append(contentsOf: other.height)
        self.bodyMassIndex.append(contentsOf: other.bodyMassIndex)
        self.bodyFatPercentage.append(contentsOf: other.bodyFatPercentage)
    }
}

/// A profile of the user's genomic data (e.g., genetic markers).
public struct GenomicProfile: Codable {
    public var geneticMarkers: [String: String] // e.g., ["rs12345": "A/G"]
    public var rawGenomicData: Data? // Store raw data if needed
    public var variantInterpretations: [String: String] // e.g., ["BRCA1": "Increased Breast Cancer Risk"]
    public var riskAlleles: [String] // List of identified risk alleles

    public init(geneticMarkers: [String : String] = [:], rawGenomicData: Data? = nil, variantInterpretations: [String : String] = [:], riskAlleles: [String] = []) {
        self.geneticMarkers = geneticMarkers
        self.rawGenomicData = rawGenomicData
        self.variantInterpretations = variantInterpretations
        self.riskAlleles = riskAlleles
    }
}

/// A profile of the user's clinical data (e.g., lab results).
public struct ClinicalProfile: Codable {
    public var labResults: [String: String] // e.g., ["Cholesterol": "200 mg/dL"]
    public var diagnoses: [String] // e.g., ["Type 2 Diabetes"]
    public var medications: [String] // e.g., ["Metformin"]
    public var immunizations: [String] // e.g., ["Flu Shot 2023"]
    public var allergies: [String] // e.g., ["Penicillin"]
    public var hospitalizations: [HospitalizationRecord] // Added
    public var procedures: [ProcedureRecord] // Added

    public init(labResults: [String : String] = [:], diagnoses: [String] = [], medications: [String] = [], immunizations: [String] = [], allergies: [String] = [], hospitalizations: [HospitalizationRecord] = [], procedures: [ProcedureRecord] = []) {
        self.labResults = labResults
        self.diagnoses = diagnoses
        self.medications = medications
        self.immunizations = immunizations
        self.allergies = allergies
        self.hospitalizations = hospitalizations
        self.procedures = procedures
    }
}

/// A profile of the user's lifestyle data (e.g., sleep, exercise).
public struct LifestyleProfile: Codable {
    public var averageSleepDuration: TimeInterval
    public var weeklyExerciseMinutes: Int
    public var sleepDurations: [TimeInterval] // Added for historical sleep
    public var deepSleepPercentage: Double // Added
    public var remSleepPercentage: Double // Added
    public var dailySteps: [Int] // Added for historical steps
    public var caloriesBurned: [Double] // Added for historical calories
    public var nutritionIntake: [NutritionEntry] // Added
    public var stressLevels: [Double] // Added
    public var mindfulnessMinutes: [Int] // Added
    public var moodScores: [Double] // Added

    public init(averageSleepDuration: TimeInterval = 0, weeklyExerciseMinutes: Int = 0, sleepDurations: [TimeInterval] = [], deepSleepPercentage: Double = 0, remSleepPercentage: Double = 0, dailySteps: [Int] = [], caloriesBurned: [Double] = [], nutritionIntake: [NutritionEntry] = [], stressLevels: [Double] = [], mindfulnessMinutes: [Int] = [], moodScores: [Double] = []) {
        self.averageSleepDuration = averageSleepDuration
        self.weeklyExerciseMinutes = weeklyExerciseMinutes
        self.sleepDurations = sleepDurations
        self.deepSleepPercentage = deepSleepPercentage
        self.remSleepPercentage = remSleepPercentage
        self.dailySteps = dailySteps
        self.caloriesBurned = caloriesBurned
        self.nutritionIntake = nutritionIntake
        self.stressLevels = stressLevels
        self.mindfulnessMinutes = mindfulnessMinutes
        self.moodScores = moodScores
    }

    public mutating func merge(with other: LifestyleProfile) {
        self.averageSleepDuration = (self.averageSleepDuration + other.averageSleepDuration) / 2 // Simple average
        self.weeklyExerciseMinutes += other.weeklyExerciseMinutes
        self.sleepDurations.append(contentsOf: other.sleepDurations)
        self.dailySteps.append(contentsOf: other.dailySteps)
        self.caloriesBurned.append(contentsOf: other.caloriesBurned)
        self.nutritionIntake.append(contentsOf: other.nutritionIntake)
        self.stressLevels.append(contentsOf: other.stressLevels)
        self.mindfulnessMinutes.append(contentsOf: other.mindfulnessMinutes)
        self.moodScores.append(contentsOf: other.moodScores)
        // Recalculate percentages if needed
        self.deepSleepPercentage = (self.deepSleepPercentage + other.deepSleepPercentage) / 2
        self.remSleepPercentage = (self.remSleepPercentage + other.remSleepPercentage) / 2
    }
}

/// A profile of the user's environmental context (e.g., air quality, pollen).
public struct EnvironmentalProfile: Codable {
    public var airQualityIndex: Int
    public var pollenCount: Int
    public var uvIndex: Int // Added
    public var noiseLevels: [Double] // Added
    public var ambientLightLevels: [Double] // Added
    public var airQualityReadings: [Int] // Added for historical
    public var pollenCounts: [Int] // Added for historical

    public init(airQualityIndex: Int = 0, pollenCount: Int = 0, uvIndex: Int = 0, noiseLevels: [Double] = [], ambientLightLevels: [Double] = [], airQualityReadings: [Int] = [], pollenCounts: [Int] = []) {
        self.airQualityIndex = airQualityIndex
        self.pollenCount = pollenCount
        self.uvIndex = uvIndex
        self.noiseLevels = noiseLevels
        self.ambientLightLevels = ambientLightLevels
        self.airQualityReadings = airQualityReadings
        self.pollenCounts = pollenCounts
    }

    public mutating func merge(with other: EnvironmentalProfile) {
        self.airQualityReadings.append(contentsOf: other.airQualityReadings)
        self.pollenCounts.append(contentsOf: other.pollenCounts)
        self.noiseLevels.append(contentsOf: other.noiseLevels)
        self.ambientLightLevels.append(contentsOf: other.ambientLightLevels)
        // Simple average for current index/count
        self.airQualityIndex = (self.airQualityIndex + other.airQualityIndex) / 2
        self.pollenCount = (self.pollenCount + other.pollenCount) / 2
        self.uvIndex = (self.uvIndex + other.uvIndex) / 2
    }
}

// MARK: - Supporting Types

public struct HealthPrediction: Codable {
    public enum PredictionType: String, Codable {
        case cardiovascularDisease = "Cardiovascular Disease"
        case diabetesRisk = "Diabetes Risk"
        case sleepDisorder = "Sleep Disorder"
        case mentalHealthIssue = "Mental Health Issue"
        case infectiousDisease = "Infectious Disease"
        case nutritionalDeficiency = "Nutritional Deficiency"
        case injuryRisk = "Injury Risk"
        case overallHealthTrend = "Overall Health Trend"
    }

    public enum RiskLevel: String, Codable, Comparable {
        case low = "Low"
        case moderate = "Moderate"
        case high = "High"
        case critical = "Critical"

        public static func < (lhs: RiskLevel, rhs: RiskLevel) -> Bool {
            return lhs.rawValue < rhs.rawValue
        }
    }

    public let type: PredictionType
    public let riskLevel: RiskLevel
    public let confidence: Double // 0-1 scale
    public let timestamp: Date
    public let details: String
    public var recommendedActions: [String]? // Added

    public init(type: PredictionType, riskLevel: RiskLevel, confidence: Double, timestamp: Date, details: String, recommendedActions: [String]? = nil) {
        self.type = type
        self.riskLevel = riskLevel
        self.confidence = confidence
        self.timestamp = timestamp
        self.details = details
        self.recommendedActions = recommendedActions
    }
}

public struct HospitalizationRecord: Codable {
    public let admissionDate: Date
    public let dischargeDate: Date?
    public let reason: String
    public let diagnosis: String
    public let procedures: [String]
}

public struct ProcedureRecord: Codable {
    public let date: Date
    public let name: String
    public let type: String // e.g., "Surgery", "Diagnostic"
    public let outcome: String?
}

public struct NutritionEntry: Codable {
    public let date: Date
    public let calories: Double
    public let protein: Double
    public let carbs: Double
    public let fat: Double
    public let waterIntake: Double
    public let mealType: String // e.g., "Breakfast", "Lunch", "Dinner", "Snack"
}

public enum HealthInsightType: String, Codable {
    case sleepQuality = "Sleep Quality"
    case cardiovascularHealth = "Cardiovascular Health"
    case stressManagement = "Stress Management"
    case activityLevel = "Activity Level"
    case overallWellness = "Overall Wellness"
}