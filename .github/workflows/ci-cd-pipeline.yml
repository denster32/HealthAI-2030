name: HealthAI 2030 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  XCODE_VERSION: '15.2'
  SWIFT_VERSION: '5.9'
  IOS_DEPLOYMENT_TARGET: '18.0'
  MACOS_DEPLOYMENT_TARGET: '15.0'

jobs:
  # MARK: - Code Quality & Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Swift
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: ${{ env.SWIFT_VERSION }}
          
      - name: Install SwiftLint
        run: |
          curl -sSL "https://github.com/realm/SwiftLint/releases/latest/download/bazel-bin-swiftlint-macos.tar.gz" | tar xz
          sudo mv swiftlint /usr/local/bin/
          
      - name: Run SwiftLint
        run: |
          swiftlint lint --reporter github-actions-logging
          
      - name: Check code formatting
        run: |
          swiftlint lint --reporter json > swiftlint-report.json
          
      - name: Upload SwiftLint report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: swiftlint-report
          path: swiftlint-report.json
          
      - name: Comment PR with lint results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('swiftlint-report.json', 'utf8'));
            const violations = report.length;
            
            if (violations > 0) {
              const comment = `⚠️ **SwiftLint found ${violations} violations**\n\nPlease fix the linting issues before merging.`;
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              const comment = `✅ **SwiftLint passed** - No violations found!`;
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # MARK: - Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: swift
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # MARK: - Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: macos-latest
    strategy:
      matrix:
        platform: [iOS, macOS, watchOS, tvOS]
        include:
          - platform: iOS
            destination: 'platform=iOS Simulator,name=iPhone 15 Pro,OS=latest'
            scheme: 'HealthAI2030App'
          - platform: macOS
            destination: 'platform=macOS'
            scheme: 'HealthAI2030App'
          - platform: watchOS
            destination: 'platform=watchOS Simulator,name=Apple Watch Series 9 (45mm),OS=latest'
            scheme: 'HealthAI2030App'
          - platform: tvOS
            destination: 'platform=tvOS Simulator,name=Apple TV 4K (3rd generation),OS=latest'
            scheme: 'HealthAI2030App'
            
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Show Xcode version
        run: xcodebuild -version
        
      - name: Show available simulators
        run: xcrun simctl list devices
        
      - name: Run unit tests
        run: |
          xcodebuild test \
            -scheme ${{ matrix.scheme }} \
            -destination '${{ matrix.destination }}' \
            -derivedDataPath ./DerivedData \
            -resultBundlePath ./TestResults.xcresult \
            -enableCodeCoverage YES \
            | xcpretty -c && exit ${PIPESTATUS[0]}
            
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.platform }}
          path: TestResults.xcresult
          
      - name: Generate coverage report
        run: |
          xcrun xccov view --report --json TestResults.xcresult > coverage-report-${{ matrix.platform }}.json
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-${{ matrix.platform }}
          path: coverage-report-${{ matrix.platform }}.json

  # MARK: - Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: macos-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Run integration tests
        run: |
          xcodebuild test \
            -scheme HealthAI2030App \
            -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=latest' \
            -only-testing:HealthAI2030AppTests/IntegrationTests \
            -derivedDataPath ./DerivedData \
            -resultBundlePath ./IntegrationTestResults.xcresult \
            | xcpretty -c && exit ${PIPESTATUS[0]}
            
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: IntegrationTestResults.xcresult

  # MARK: - UI Tests
  ui-tests:
    name: UI Tests
    runs-on: macos-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Run UI tests
        run: |
          xcodebuild test \
            -scheme HealthAI2030App \
            -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=latest' \
            -only-testing:HealthAI2030UITests \
            -derivedDataPath ./DerivedData \
            -resultBundlePath ./UITestResults.xcresult \
            | xcpretty -c && exit ${PIPESTATUS[0]}
            
      - name: Upload UI test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-results
          path: UITestResults.xcresult

  # MARK: - Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: macos-latest
    needs: [unit-tests, integration-tests, ui-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Run performance tests
        run: |
          xcodebuild test \
            -scheme HealthAI2030App \
            -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=latest' \
            -only-testing:HealthAI2030IntegrationTests/PerformanceTests \
            -derivedDataPath ./DerivedData \
            -resultBundlePath ./PerformanceTestResults.xcresult \
            | xcpretty -c && exit ${PIPESTATUS[0]}
            
      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: PerformanceTestResults.xcresult

  # MARK: - Documentation Generation
  documentation-generation:
    name: DocC Documentation Generation
    runs-on: macos-latest
    needs: [code-quality, security-scan, unit-tests, integration-tests, ui-tests, performance-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Run DocC Generation Script
        run: |
          chmod +x ./Scripts/docc_generation.sh
          ./Scripts/docc_generation.sh

      - name: Upload Documentation
        uses: actions/upload-artifact@v4
        with:
          name: docc-documentation
          path: DocCDocumentation

      - name: Check Documentation Coverage
        run: |
          # The docc_generation.sh script already checks documentation coverage
          # If the script fails, it will exit with an error code
          exit 0  # Ensure the job doesn't fail if coverage is low (configurable in the script)

      - name: Publish Documentation (Optional)
        if: github.ref == 'refs/heads/main'
        run: |
          # Add steps to publish documentation to GitHub Pages or other hosting
          echo "Publishing documentation..."
          # Example: gh-pages deployment or other hosting mechanism

  # MARK: - Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: macos-latest
    needs: [documentation-generation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment steps

  # MARK: - Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: macos-latest
    needs: [documentation-generation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Add production deployment steps

  # MARK: - Post-Deployment Checks
  post-deployment-checks:
    name: Post-Deployment Validation
    runs-on: macos-latest
    needs: [deploy-staging, deploy-production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Post-Deployment Checks
        run: |
          echo "Running post-deployment validation..."
          # Add post-deployment validation steps 